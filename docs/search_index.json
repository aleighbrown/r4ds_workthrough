[["index.html", "R4DS Exercise Solutions zxcv1 Prerequisites", " R4DS Exercise Solutions Maddie Lombardo 2022-01-26 zxcv1 Prerequisites I’m going to put some nonsense here and see what happens "],["chapter-3.html", "zxcv2 Chapter 3 2.1 Chapter 3.2.4 Exercises 2.2 Chapter 3.3.1 Exercises 2.3 Chapter 3.5.1 Exercises 2.4 Chapter 3.6.1 Excersises 2.5 Chapter 3.7.1 Exercises 2.6 Chapter 3.8.1 Exercises 2.7 Chapter 3.9.1 Exercises", " zxcv2 Chapter 3 2.1 Chapter 3.2.4 Exercises 2.1.1 Question 1: Run ggplot(data = mpg). What do you see? ggplot(data = mpg) This line of code does not output a graph as there is no geom function to tell R studio what to output. Need ‘+ geom_point(mapping = aes(x = displ, y = ’variable’))’ to see anything 2.1.2 Question 2: How many rows are in mpg? How many columns? 234 rows, 11 columns 2.1.3 Question 3: What does the drv variable describe? Read the help for ?mpg to find out. drv = the type of drive train, f = fwd, r = rwd, 4 = 4wd 2.1.4 Question 4: Make a scatterplot of hwy vs cyl. ggplot(data = mpg) + geom_point(mapping = aes(x = hwy, y = cyl)) 2.1.5 Question 5: What happens if you make a scatterplot of class vs drv? Why is the plot not useful? ggplot(data = mpg) + geom_point(mapping = aes(x = class, y = drv)) This is not helpful because there are no numerical values in class or drv so a scatterplot wouldn’t be a good way to visualize this data. 2.2 Chapter 3.3.1 Exercises 2.2.1 Question 1: What’s gone wrong with this code? Why are the points not blue? ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = &quot;blue&quot;)) #this is incorrect because there is a missing parenthesis after hwy. should be: ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = &quot;blue&quot;) 2.2.2 Question 2:Which variables in mpg are categorical? Which variables are continuous? (Hint: type ?mpg to read the documentation for the dataset). How can you see this information when you run mpg? categorical variables: manufacturer, model, trans, drv, fl, class continuous variables: displ, year, cyl, cty, hwy you can see this when you run mpg under the columns where it displays the type of variable (cat = cont = , ) 2.2.3 Question 3:Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables? ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = displ, color = year, shape = cyl)) ## Error: A continuous variable can not be mapped to shape you can’t map a continuous variable to shape ggplot(data = mpg) + geom_point(mapping = aes(x = manufacturer, y = model, size = model, color = trans, shape = class)) ## Warning: Using size for a discrete variable is not advised. ## Warning: The shape palette can deal with a maximum of 6 discrete values because more than 6 becomes difficult to ## discriminate; you have 7. Consider specifying shapes manually if you must have them. ## Warning: Removed 62 rows containing missing values (geom_point). You shouldn’t use size for a discrete variable; the shape palette can only handle 6 values so any more doesn’t work well; asks you to specify shapes if you have to have them. 2.2.4 Question 4: What happens if you map the same variable to multiple aesthetics? The points for what you are graphing each have a specific color, size, and shape. ggplot(data = mpg) + geom_point(mapping = aes(x = manufacturer, y = model, size = class, color = class, shape = class)) ## Warning: Using size for a discrete variable is not advised. ## Warning: The shape palette can deal with a maximum of 6 discrete values because more than 6 becomes difficult to ## discriminate; you have 7. Consider specifying shapes manually if you must have them. ## Warning: Removed 62 rows containing missing values (geom_point). 2.2.5 Question 5: What does the stroke aesthetic do? What shapes does it work with? (Hint: use ?geom_point) if a shape had a border, stroke would control the width of the border 2.2.6 Question 6: What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ &lt; 5)? Note, you’ll also need to specify x and y. ggplot(data = mpg) + geom_point(mapping = aes(x = manufacturer, y = model, color = displ &lt; 5)) This colors the points based on if the condition displ &lt; 5 is true or false 2.3 Chapter 3.5.1 Exercises 2.3.1 Question 1: What happens if you facet on a continuous variable? Creates a new graph for each of the numbers in the continuous variable like displ, see below ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ displ, nrow = 2) 2.3.2 Question 2: What happens if you facet on a continuous variable? The empty cells in the plot with facet_grid(drv ~ cyl) show that there are no points that relate to both variables (cyl, drv). for example, for the cells with 5 cylinders and 4wd, there are no points so cannot plot the displ and hwy for it. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl) 2.3.3 Question 3: What plots does the following code make? What does . do? The ‘.’ determines where the drv axis will be (on the righthand side vs the top). It is the placeholder for the empty axis. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ .) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ drv) 2.3.4 Question 4: Take the first faceted plot in this section. What are the advantages to using faceting instead of the colour aesthetic? What are the disadvantages? How might the balance change if you had a larger dataset? The advantage of using facet wrap instead of color is that it allows you to more easily see differences in hwy and displ for each car type because they are separated into individual graphs. Especially for large datasets, it would be quite difficult to see all of one car types’ data points with color because they could overlap on the graph. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2) 2.3.5 Question 5: Read ?facet_wrap. What does nrow do? What does ncol do? What other options control the layout of the individual panels? Why doesn’t facet_grid() have nrow and ncol arguments? nrow is the number of rows, ncol is the number of columns. The other options that control the layout of the panels include: scales, shrink, switch, dir, strip.position. Facet_grid does not have nrow and ncol because it is creating a matrix of panels, and does not on its own have a specified number of columns and rows. 2.3.6 Question 6: When using facet_grid() you should usually put the variable with more unique levels in the columns. Why? Because if you add more levels to the rows, the col axis (y-axis) would be shorter, meaning that it would be harder to see the actual values on the plots. 2.4 Chapter 3.6.1 Excersises 2.4.1 Question 1: What geom would you use to draw a line chart? A boxplot? A histogram? An area chart? line chart: geom_smooth boxplot: geom_boxplot histogram: geom_histogram area chart: geom_area 2.4.2 Question 2: Run this code in your head and predict what the output will look like. Then, run the code in R and check your predictions. ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth(se = FALSE) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 2.4.3 Question 3: What does show.legend = FALSE do? What happens if you remove it? show.legend = FALSE will remove the legend key from the plot. If it is not there, the ggplot function assumes it should exist to describe the aesthetics for variables. 2.4.4 Question 4: What does the se argument to geom_smooth() do? se shows the confidence interval around the smooth line 2.4.5 Question 5: Will these two graphs look different? Why/why not? ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot() + geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy)) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; These graphs don’t look different because they are identical in meaning. The top code is much more concise code, as the data and aesthetics are described in the ggplot portion and the point and smooth functions are how the data will plot. 2.4.6 Question 6: Recreate the R code necessary to generate the following graphs. ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth(se = FALSE) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy, group = drv), se = FALSE) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy, group = drv), se = FALSE) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = drv)) + geom_smooth(se = FALSE) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = drv)) + geom_smooth(se = FALSE) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = drv)) + geom_smooth(mapping = aes(x = displ, y = hwy, group = drv), se = FALSE) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(colour = &quot;white&quot;, size = 4) + geom_point(mapping = aes(color = drv), size = 1.5) 2.5 Chapter 3.7.1 Exercises 2.5.1 Question 1: What is the default geom associated with stat_summary()? How could you rewrite the previous plot to use that geom function instead of the stat function? The default geom is pointrange. ggplot(data = diamonds) + stat_summary( mapping = aes(x = cut, y = depth), fun.min = min, fun.max = max, fun = median ) ggplot(data = diamonds) + geom_pointrange( mapping = aes(x = cut, y = depth), stat = &quot;summary&quot; ) ## No summary function supplied, defaulting to `mean_se()` 2.5.2 Question 2: What does geom_col() do? How is it different to geom_bar()? ggplot(data = diamonds, mapping = aes(x = carat, y = price))+ geom_col() ggplot(data = diamonds, mapping = aes(x = carat, y = price))+ geom_bar(stat = &#39;identity&#39;) They create the same graph but have different defaults; geom_bar only expects an x variable wherease geom_col requires x and y. 2.5.3 Question 3: Most geoms and stats come in pairs that are almost always used in concert. Read through the documentation and make a list of all the pairs. What do they have in common? geom_bar() -&gt; stat_count() geom_bin2d() -&gt; stat_bin_2d() geom_boxplot() -&gt; stat_boxplot() geom_contour_filled() -&gt; stat_contour_filled() geom_contour() -&gt; stat_contour() geom_count() -&gt; stat_sum() geom_density_2d() -&gt; stat_density_2d() geom_density() -&gt; stat_density() geom_dotplot() -&gt; stat_bindot() geom_function() -&gt; stat_function() geom_sf() -&gt; stat_sf() geom_sf() -&gt; stat_sf() geom_smooth() -&gt; stat_smooth() geom_violin() -&gt; stat_ydensity() geom_hex() -&gt; stat_bin_hex() geom_qq_line() -&gt; stat_qq_line() geom_qq() -&gt; stat_qq() geom_quantile() -&gt; stat_quantile() You can see that each geom type has a stat associated with it; specific to the name and type of graph it creates. 2.5.4 Question 4: What variables does stat_smooth() compute? What parameters control its behaviour? stat_smooth() computes: predicted values (y, x), confidence interval around the mean (ymin or xmin and ymax or ymin), and the standard error (se). The behavior of stat_smooth() is controlled by: na.rm, method, formula, se, method.args 2.5.5 Question 5: In our proportion bar chart, we need to set group = 1. Why? In other words what is the problem with these two graphs? If group = 1 is not included, it will set the height of all the bars as the same. The issue is that the proportions are set inside the groups in this code. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = after_stat(prop))) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = color, y = after_stat(prop))) 2.6 Chapter 3.8.1 Exercises 2.6.1 Question 1: What is the problem with this plot? How could you improve it? ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point() ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point()+ geom_jitter() The use of geom_jitter() improves this plot because it makes it more visible to see the overlapping points. Without it, there is the issue of overplotting and the graph is less obvious. 2.6.2 Question 2: What parameters to geom_jitter() control the amount of jittering? width and height: the amount of vertical and horizontal jitter 2.6.3 Question 3: Compare and contrast geom_jitter() with geom_count(). geom_jitter and geom_count both are useful in overplotting situations as they both reveal overlapping points. Geom_jitter makes it visible the points that overlap whereas geom_count provides the number of points overlapping at each location on the graph. 2.6.4 Question 4: What’s the default position adjustment for geom_boxplot()? Create a visualisation of the mpg dataset that demonstrates it. ggplot(data = mpg, mapping = aes(x = cty, y = hwy, group = drv))+ geom_boxplot() The default position adjustment for geom_boxplot() is “dodge2.” ggplot(data = mpg, mapping = aes(x = cty, y = hwy, group = drv))+ geom_boxplot(position = &quot;dodge2&quot;) Both graphs are identical, showing that the default position is ‘dodge2.’ 2.7 Chapter 3.9.1 Exercises 2.7.1 Question 1: Turn a stacked bar chart into a pie chart using coord_polar(). ggplot(data = diamonds) + geom_bar( mapping = aes(x = cut, fill = cut), show.legend = FALSE, width = 1 ) + theme(aspect.ratio = 1) + labs(x = NULL, y = NULL)+ coord_flip() ggplot(data = diamonds) + geom_bar( mapping = aes(x = cut, fill = cut), show.legend = FALSE, width = 1 ) + theme(aspect.ratio = 1) + labs(x = NULL, y = NULL)+ coord_flip()+ coord_polar() ## Coordinate system already present. Adding new coordinate system, which will replace the existing one. 2.7.2 Question 2: What does labs() do? Read the documentation. labs() adds labels to your graph. It provides options to set a title, subtitle, caption, tag, or x/y labels. 2.7.3 Question 3: What’s the difference between coord_quickmap() and coord_map()? coord_quickmap() is a quick approximation that preserves straight lines for the 2D plane from the spherical earth (so is better for smaller areas close to equator); coord_map(), on the other hand, requires a lot of computation because it projects a portion of the earth onto a 2D plane but doesn’t preserve straight lines. 2.7.4 Question 4: What does the plot below tell you about the relationship between city and highway mpg? Why is coord_fixed() important? What does geom_abline() do? ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point() + geom_abline() + coord_fixed() The plot tells you that there is higher highway miles per gallon compared to city miles per gallon for all cars. coord_fixed() is important because it does not stretch out the graph so that it is a perfect square. It better shows the actual numerical value’s position for hwy/cty. geom_abline() adds a reference line for the correlation between hwy and cty. "],["chapter-4.html", "zxcv3 Chapter 4 3.1 Chapter 4.4 Exercises", " zxcv3 Chapter 4 3.1 Chapter 4.4 Exercises 3.1.1 Question 1: Why does this code not work? my_variable &lt;- 10 my_varıable ## Error in eval(expr, envir, enclos): object &#39;my_varıable&#39; not found #&gt; Error in eval(expr, envir, enclos): object &#39;my_varıable&#39; not found The error is that the ‘i’ in my_variable is a 1 when it is attempted to be called.R needs you to be explicit with no typos when attempting to execute code. 3.1.2 Question 2: Tweak each of the following R commands so that they run correctly: ggplot(dota = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) #won&#39;t run ## Error in FUN(X[[i]], ...): object &#39;displ&#39; not found ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) fliter(mpg, cyl = 8) #won&#39;t run ## Error in fliter(mpg, cyl = 8): could not find function &quot;fliter&quot; filter(mpg, cyl == 8) ## # A tibble: 70 × 11 ## manufacturer model displ year cyl trans drv cty hwy fl class ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 audi a6 quattro 4.2 2008 8 auto(s6) 4 16 23 p midsize ## 2 chevrolet c1500 suburban 2wd 5.3 2008 8 auto(l4) r 14 20 r suv ## 3 chevrolet c1500 suburban 2wd 5.3 2008 8 auto(l4) r 11 15 e suv ## 4 chevrolet c1500 suburban 2wd 5.3 2008 8 auto(l4) r 14 20 r suv ## 5 chevrolet c1500 suburban 2wd 5.7 1999 8 auto(l4) r 13 17 r suv ## 6 chevrolet c1500 suburban 2wd 6 2008 8 auto(l4) r 12 17 r suv ## 7 chevrolet corvette 5.7 1999 8 manual(m6) r 16 26 p 2seater ## 8 chevrolet corvette 5.7 1999 8 auto(l4) r 15 23 p 2seater ## 9 chevrolet corvette 6.2 2008 8 manual(m6) r 16 26 p 2seater ## 10 chevrolet corvette 6.2 2008 8 auto(s6) r 15 25 p 2seater ## # … with 60 more rows filter(diamond, carat &gt; 3)#won&#39;t run ## Error in filter(diamond, carat &gt; 3): object &#39;diamond&#39; not found filter(diamonds, carat &gt; 3) ## # A tibble: 32 × 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 3.01 Premium I I1 62.7 58 8040 9.1 8.97 5.67 ## 2 3.11 Fair J I1 65.9 57 9823 9.15 9.02 5.98 ## 3 3.01 Premium F I1 62.2 56 9925 9.24 9.13 5.73 ## 4 3.05 Premium E I1 60.9 58 10453 9.26 9.25 5.66 ## 5 3.02 Fair I I1 65.2 56 10577 9.11 9.02 5.91 ## 6 3.01 Fair H I1 56.1 62 10761 9.54 9.38 5.31 ## 7 3.65 Fair H I1 67.1 53 11668 9.53 9.48 6.38 ## 8 3.24 Premium H I1 62.1 58 12300 9.44 9.4 5.85 ## 9 3.22 Ideal I I1 62.6 55 12545 9.49 9.42 5.92 ## 10 3.5 Ideal H I1 62.8 57 12587 9.65 9.59 6.03 ## # … with 22 more rows "],["chapter-5.html", "zxcv4 Chapter 5 4.1 Chapter 5.2.4 Exercises 4.2 Chapter 5.3.1 Exercises 4.3 Chapter 5.4.1 Exercises 4.4 5.5.2 Exercises", " zxcv4 Chapter 5 4.1 Chapter 5.2.4 Exercises 4.1.1 Question 1: Find all flights that: 1.1 Had an arrival delay of two or more hours delay_more_2 &lt;- filter(nycflights13::flights, arr_delay &gt; 120) 10034 flights had an arrival delay of 2 or more hours 1.2 Flew to Houston (IAH or HOU) flew_to_houston &lt;- filter(nycflights13::flights, dest == &quot;IAH&quot; | dest == &quot;HOU&quot;) 9313 flights flew to a Houston airport 1.3 Were operated by United, American, or Delta un_am_del &lt;- filter(nycflights13::flights, carrier == &quot;AA&quot; | carrier == &quot;DL&quot; | carrier == &quot;UA&quot;) 139504 flights were operated by United, American, or Delta 1.4 Departed in summer (July, August, and September) summer_flight &lt;- filter(nycflights13::flights, month %in% c(7,8,9)) 86326 flights departed in summer 1.5 Arrived more than two hours late, but didn’t leave late arr_2_late_dep_on_time &lt;- filter(nycflights13::flights, dep_delay &lt;= 0 &amp; arr_delay &gt; 120) 29 flights arrived more than 2 hours late, but left on time or early. 1.6 Were delayed by at least an hour, but made up over 30 minutes in flight made_up_30 &lt;- filter(nycflights13::flights, dep_delay &gt;= 60 &amp; ((dep_delay - arr_delay) &gt; 30)) 1844 flights were delayed by at least an hour but made up over 30 minutes in air 1.7 Departed between midnight and 6am (inclusive) overnight_flight_dep &lt;- filter(nycflights13::flights, dep_time %in% c(12,1,2,3,4,5,6)) 177 flights left between midnight and 6am 4.1.2 Question 2: Another useful dplyr filtering helper is between(). What does it do? Can you use it to simplify the code needed to answer the previous challenges? between() will select the rows of values that fall within a specific range. Must be a numeric vector.You could simplify the last exercise (1.7) by: overnight_dep &lt;- filter(nycflights13::flights, between(dep_time, 1, 6) | dep_time ==12) 4.1.3 Question 3: How many flights have a missing dep_time? What other variables are missing? What might these rows represent? missing_dep_time &lt;- filter(nycflights13::flights, is.na(dep_time)) 8255 flights have a missing departure time These flights are also missing a dep_delay and arr_time, so these may represent the flights that were cancelled. 4.1.4 Question 4: Why is NA ^ 0 not missing? Why is NA | TRUE not missing? Why is FALSE &amp; NA not missing? Can you figure out the general rule? (NA * 0 is a tricky counterexample!) NA ^ 0 = 1 because everything to the 0th power is 1. NA | TRUE it’ll still return the the result of the boolean. FALSE &amp; NA will return the result of the boolean. The general rule is that it will return the boolean value. NA*0 = NA because when you try to do math on an NA value, it will return NA 4.2 Chapter 5.3.1 Exercises 4.2.1 Question 1: How could you use arrange() to sort all missing values to the start? (Hint: use is.na()). arrange(flights, desc(is.na(flights))) ## # A tibble: 336,776 × 22 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2013 1 2 NA 1545 NA NA 1910 NA AA 133 &lt;NA&gt; JFK ## 2 2013 1 2 NA 1601 NA NA 1735 NA UA 623 &lt;NA&gt; EWR ## 3 2013 1 3 NA 857 NA NA 1209 NA UA 714 &lt;NA&gt; EWR ## 4 2013 1 3 NA 645 NA NA 952 NA UA 719 &lt;NA&gt; EWR ## 5 2013 1 4 NA 845 NA NA 1015 NA 9E 3405 &lt;NA&gt; JFK ## 6 2013 1 4 NA 1830 NA NA 2044 NA 9E 3716 &lt;NA&gt; EWR ## 7 2013 1 5 NA 840 NA NA 1001 NA 9E 3422 &lt;NA&gt; JFK ## 8 2013 1 7 NA 820 NA NA 958 NA 9E 3317 &lt;NA&gt; JFK ## 9 2013 1 8 NA 1645 NA NA 1838 NA US 123 &lt;NA&gt; EWR ## 10 2013 1 9 NA 755 NA NA 1012 NA 9E 4023 &lt;NA&gt; EWR ## # … with 336,766 more rows, and 9 more variables: dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, ## # time_hour &lt;dttm&gt;, speed &lt;dbl&gt;, min_since_mid_dep_time &lt;dbl&gt;, min_since_mid_sched_dep_time &lt;dbl&gt; 4.2.2 Question 2: Sort flights to find the most delayed flights. Find the flights that left earliest. most_delay &lt;- arrange(flights, desc(dep_delay)) most_delay %&gt;% arrange(dep_time) ## # A tibble: 336,776 × 22 ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2013 4 10 1 1930 271 106 2101 245 UA 1703 N33203 EWR ## 2 2013 5 22 1 1935 266 154 2140 254 EV 4361 N27200 EWR ## 3 2013 6 24 1 1950 251 105 2130 215 AA 363 N546AA LGA ## 4 2013 7 1 1 2029 212 236 2359 157 B6 915 N653JB JFK ## 5 2013 1 31 1 2100 181 124 2225 179 WN 530 N550WN LGA ## 6 2013 2 11 1 2100 181 111 2225 166 WN 530 N231WN LGA ## 7 2013 3 18 1 2128 153 247 2355 172 B6 97 N760JB JFK ## 8 2013 6 25 1 2130 151 249 14 155 B6 1371 N607JB LGA ## 9 2013 2 24 1 2245 76 121 2354 87 B6 608 N216JB JFK ## 10 2013 1 13 1 2249 72 108 2357 71 B6 22 N206JB JFK ## # … with 336,766 more rows, and 9 more variables: dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, ## # time_hour &lt;dttm&gt;, speed &lt;dbl&gt;, min_since_mid_dep_time &lt;dbl&gt;, min_since_mid_sched_dep_time &lt;dbl&gt; 4.2.3 Question 3: Sort flights to find the fastest (highest speed) flights. flights &lt;- flights %&gt;% mutate(speed = distance/hour) fastest_flights &lt;- arrange(flights, desc(speed)) 4.2.4 Question 4: Which flights travelled the farthest? Which travelled the shortest? far &lt;- arrange(flights, desc(distance)) short &lt;- arrange(flights, distance) 4.3 Chapter 5.4.1 Exercises 4.3.1 Question 1: Brainstorm as many ways as possible to select dep_time, dep_delay, arr_time, and arr_delay from flights. flights %&gt;% select(matches(&quot;^dep_&quot;),matches(&quot;^arr_&quot;)) ## # A tibble: 336,776 × 4 ## dep_time dep_delay arr_time arr_delay ## &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 517 2 830 11 ## 2 533 4 850 20 ## 3 542 2 923 33 ## 4 544 -1 1004 -18 ## 5 554 -6 812 -25 ## 6 554 -4 740 12 ## 7 555 -5 913 19 ## 8 557 -3 709 -14 ## 9 557 -3 838 -8 ## 10 558 -2 753 8 ## # … with 336,766 more rows flights %&gt;% select(dep_time, dep_delay, arr_time, arr_delay) ## # A tibble: 336,776 × 4 ## dep_time dep_delay arr_time arr_delay ## &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 517 2 830 11 ## 2 533 4 850 20 ## 3 542 2 923 33 ## 4 544 -1 1004 -18 ## 5 554 -6 812 -25 ## 6 554 -4 740 12 ## 7 555 -5 913 19 ## 8 557 -3 709 -14 ## 9 557 -3 838 -8 ## 10 558 -2 753 8 ## # … with 336,766 more rows # you can also select by column position number flights %&gt;% select(4,6,7,9) ## # A tibble: 336,776 × 4 ## dep_time dep_delay arr_time arr_delay ## &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 517 2 830 11 ## 2 533 4 850 20 ## 3 542 2 923 33 ## 4 544 -1 1004 -18 ## 5 554 -6 812 -25 ## 6 554 -4 740 12 ## 7 555 -5 913 19 ## 8 557 -3 709 -14 ## 9 557 -3 838 -8 ## 10 558 -2 753 8 ## # … with 336,766 more rows *these are the reasonable ways to do this, you could do ridiculous things like subtracting every name but those you want 4.3.2 Question 2: What happens if you include the name of a variable multiple times in a select() call? flights %&gt;% select(year, year, month,day, year) ## # A tibble: 336,776 × 3 ## year month day ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 ## 2 2013 1 1 ## 3 2013 1 1 ## 4 2013 1 1 ## 5 2013 1 1 ## 6 2013 1 1 ## 7 2013 1 1 ## 8 2013 1 1 ## 9 2013 1 1 ## 10 2013 1 1 ## # … with 336,766 more rows It will only print the variable one time, regardless of how many times you call the variable name in select() 4.3.3 Question 3: What does the any_of() function do? Why might it be helpful in conjunction with this vector? vars &lt;- c(&quot;year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;dep_delay&quot;, &quot;arr_delay&quot;) flights %&gt;% select(any_of(vars)) ## # A tibble: 336,776 × 5 ## year month day dep_delay arr_delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2013 1 1 2 11 ## 2 2013 1 1 4 20 ## 3 2013 1 1 2 33 ## 4 2013 1 1 -1 -18 ## 5 2013 1 1 -6 -25 ## 6 2013 1 1 -4 12 ## 7 2013 1 1 -5 19 ## 8 2013 1 1 -3 -14 ## 9 2013 1 1 -3 -8 ## 10 2013 1 1 -2 8 ## # … with 336,766 more rows any_of() select variables in a character vector and does not check for missing variables. 4.3.4 Question 4: Does the result of running the following code surprise you? How do the select helpers deal with case by default? How can you change that default? select(flights, contains(&quot;TIME&quot;)) ## # A tibble: 336,776 × 8 ## dep_time sched_dep_time arr_time sched_arr_time air_time time_hour min_since_mid_dep_time min_since_mid_sched… ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 517 515 830 819 227 2013-01-01 05:00:00 317 315 ## 2 533 529 850 830 227 2013-01-01 05:00:00 333 329 ## 3 542 540 923 850 160 2013-01-01 05:00:00 342 340 ## 4 544 545 1004 1022 183 2013-01-01 05:00:00 344 345 ## 5 554 600 812 837 116 2013-01-01 06:00:00 354 360 ## 6 554 558 740 728 150 2013-01-01 05:00:00 354 358 ## 7 555 600 913 854 158 2013-01-01 06:00:00 355 360 ## 8 557 600 709 723 53 2013-01-01 06:00:00 357 360 ## 9 557 600 838 846 140 2013-01-01 06:00:00 357 360 ## 10 558 600 753 745 138 2013-01-01 06:00:00 358 360 ## # … with 336,766 more rows No, as the code prints all the variables that contain the string “time” within it. The default is that ignore.case = TRUE, so the capitalization within the code wouldn’t effect the output. You can change ignore.case = FALSE to make it case dependent. 4.4 5.5.2 Exercises 4.4.1 Question 1: Currently dep_time and sched_dep_time are convenient to look at, but hard to compute with because they’re not really continuous numbers. Convert them to a more convenient representation of number of minutes since midnight. flights &lt;- flights %&gt;% mutate(min_since_mid_dep_time = dep_time %/% 100 * 60 + dep_time %% 100) flights &lt;- flights %&gt;% mutate(min_since_mid_sched_dep_time = sched_dep_time%/% 100 * 60 + sched_dep_time %% 100) 4.4.2 Question 2: Compare air_time with arr_time - dep_time. What do you expect to see? What do you see? What do you need to do to fix it? head(flights$air_time) ## [1] 227 227 160 183 116 150 airtime2 &lt;- flights$arr_time - flights$dep_time head(airtime2) ## [1] 313 317 381 460 258 186 The air_time’s are smaller than the (arr_time-dep_time)’s. This is because the arr_time and dep_time are written not in the minutes since midnight but rather just the hourminutes of time (i.e. 315 = 3:15) together. air_time is the total amount of time spent in the air in minutes. Therefore, to fix this, you should use calculate the minutes "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
